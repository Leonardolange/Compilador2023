package compilador;

public interface ParserConstants
{
    int START_SYMBOL = 37;

    int FIRST_NON_TERMINAL    = 37;
    int FIRST_SEMANTIC_ACTION = 74;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  3, -1, -1, -1, -1, -1, -1, -1, -1,  3,  3, -1,  3,  3, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  4, -1, -1, -1, -1, -1, -1, -1, -1,  4,  4, -1,  4,  4, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  5, -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1,  6,  6, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  8,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, 13, 13, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 14, 15, 16, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 19, -1, 20, 22, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 25, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 29, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 35, -1, 35, 35, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 36, -1, 36, 36, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 44, 44, 44, 44, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 47, -1, 45, 45, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 31, 31, 31, 31, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 31, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 31, 31, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 48, 48, 48, 48, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, 51, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1 },
        { -1, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, 53, 53, -1, -1, -1, 53, -1, -1, 54, 54, 54, 54, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 56, 57, 58, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, -1, 60, 60, -1, -1, -1, 60, -1, -1, 60, 60, 60, 60, 61, 62, -1, -1 },
        { -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, 63, 63, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, 64, 64, -1, -1, -1, 64, -1, -1, 64, 64, 64, 64, 64, 64, 65, 66 },
        { -1, 67, 68, 69, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, 72, 73, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 10, 13, 27, 38, 28 },
        { 40, 39 },
        {  0 },
        { 38 },
        { 41, 22 },
        { 44, 42 },
        { 47 },
        { 43 },
        { 48 },
        {  0 },
        { 24, 46 },
        {  2, 45 },
        { 21, 44 },
        {  0 },
        {  3 },
        {  4 },
        {  5 },
        {  9 },
        { 16 },
        { 49 },
        { 53 },
        { 54 },
        { 58 },
        { 23, 61 },
        { 12, 25, 50, 26 },
        { 52, 44, 51 },
        { 22, 50 },
        {  0 },
        {  5, 21 },
        {  0 },
        { 14, 25, 63, 26 },
        { 61, 64 },
        { 21, 63 },
        {  0 },
        { 11, 25, 61, 26, 27, 55, 28, 57 },
        { 47, 22, 56 },
        { 55 },
        {  0 },
        {  8, 27, 55, 28 },
        {  0 },
        { 59 },
        { 60 },
        { 17, 25, 61, 26,  7, 27, 55, 28 },
        { 15, 27, 55, 28, 17, 25, 61, 26 },
        { 65, 62 },
        {  0 },
        { 18, 65, 62 },
        { 19, 65, 62 },
        { 66 },
        { 16 },
        {  9 },
        { 20, 65 },
        { 69, 67 },
        {  0 },
        { 68, 69 },
        { 29 },
        { 30 },
        { 31 },
        { 32 },
        { 71, 70 },
        {  0 },
        { 33, 71, 70 },
        { 34, 71, 70 },
        { 73, 72 },
        {  0 },
        { 35, 73, 72 },
        { 36, 73, 72 },
        {  2 },
        {  3 },
        {  4 },
        {  5 },
        { 25, 61, 26 },
        { 33, 73 },
        { 34, 73 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado id",
        "Era esperado int",
        "Era esperado float",
        "Era esperado string",
        "Era esperado palavra",
        "Era esperado pr_do",
        "Era esperado pr_else",
        "Era esperado pr_false",
        "Era esperado pr_fun",
        "Era esperado pr_if",
        "Era esperado pr_in",
        "Era esperado pr_main",
        "Era esperado pr_out",
        "Era esperado pr_repeat",
        "Era esperado pr_true",
        "Era esperado pr_while",
        "Era esperado and",
        "Era esperado or",
        "Era esperado not",
        "Era esperado comma",
        "Era esperado semicolon",
        "Era esperado equal",
        "Era esperado colon",
        "Era esperado parenthesis_o",
        "Era esperado parenthesis_c",
        "Era esperado brace_o",
        "Era esperado brace_c",
        "Era esperado equity",
        "Era esperado different",
        "Era esperado minor",
        "Era esperado major",
        "Era esperado plus",
        "Era esperado minus",
        "Era esperado multiply",
        "Era esperado split",
        "<program> inválido",
        "<list_inst> inválido",
        "<list_inst_aux> inválido",
        "<inst> inválido",
        "<inst_aux> inválido",
        "<inst_aux1> inválido",
        "<declare> inválido",
        "<id_list> inválido",
        "<id_list_aux> inválido",
        "<valor> inválido",
        "<cmd> inválido",
        "<assign_cmd> inválido",
        "<in_cmd> inválido",
        "<in_list> inválido",
        "<in_list_aux> inválido",
        "<string_opt> inválido",
        "<out_cmd> inválido",
        "<select_cmd> inválido",
        "<cmd_list> inválido",
        "<cmd_list_aux> inválido",
        "<else_opt> inválido",
        "<loop_cmd> inválido",
        "<while_cmd> inválido",
        "<repeat_cmd> inválido",
        "<expression> inválido",
        "<expression_> inválido",
        "<expression_list> inválido",
        "<expression_list_aux> inválido",
        "<element> inválido",
        "<relational> inválido",
        "<relational_> inválido",
        "<relational_operator> inválido",
        "<arithmetic> inválido",
        "<arithmetic_> inválido",
        "<term> inválido",
        "<term_> inválido",
        "<factor> inválido"
    };
}
